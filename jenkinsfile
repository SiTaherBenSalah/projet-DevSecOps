pipeline {
    agent any

    environment {
        DOCKER_COMPOSE = 'docker-compose'
        PROJECT_NAME = 'php-crud-app'
    }

    stages {
        // Stage 1: Cloner le d√©p√¥t GitHub
        stage('Clone Repo') {
            steps {
                git branch: 'main', // <-- Assure-toi que ta branche GitHub s'appelle bien 'main'. Sinon, remplace par 'master'
                    url: 'https://github.com/SiTaherBenSalah/projet-DevSecOps.git',
                    credentialsId: 'github-cred' // <-- L'identifiant que tu as mis lors de l'ajout du token dans Jenkins
            }
        }

        // Stage 2: Analyse de d√©pendances OWASP
        stage('Dependency Scan - OWASP') {
            steps {
                script {
                    echo '[INFO] Lancement de OWASP Dependency Check...'
                    sh '''
                        mkdir -p reports
                        dependency-check.sh \
                            --project "PHP CRUD App" \
                            --scan . \
                            --format XML \
                            --out reports/
                    '''
                }
                // Publier les r√©sultats
                dependencyCheckPublisher pattern: 'reports/*.xml'
            }
        }

        // Stage 3: Build des conteneurs Docker
        stage('Build with Docker Compose') {
            steps {
                echo '[INFO] Build des conteneurs Docker...'
                sh "${DOCKER_COMPOSE} build"
            }
        }

        // Stage 4: D√©marrage des conteneurs
        stage('Start Docker Containers') {
            steps {
                echo '[INFO] Lancement des conteneurs Docker...'
                sh "${DOCKER_COMPOSE} up -d"
            }
        }

        // Stage 5 (optionnel): Tests (ex: ping d'une URL)
        stage('Basic App Test') {
            steps {
                echo '[INFO] V√©rification de l\'application...'
                sh 'curl -s http://localhost:8080 || true' // Adapte l'URL selon ton port expos√©
            }
        }
    }

    post {
        success {
            echo '‚úÖ Build et d√©ploiement termin√©s avec succ√®s !'
        }
        failure {
            echo '‚ùå √âchec du build. V√©rifiez les journaux.'
        }
        always {
            echo 'üßπ Nettoyage des conteneurs Docker...'
            sh '''
                if ${DOCKER_COMPOSE} ps > /dev/null 2>&1; then
                    ${DOCKER_COMPOSE} stop
                    ${DOCKER_COMPOSE} down
                fi
            '''
        }
    }
}
